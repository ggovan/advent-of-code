{
	// Place your advent-of-code workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"create a new day": {
		"scope": "rust",
		"prefix": "newday",
		"body": [
			"use crate::aoc_2020::Aoc2020;",
			"use crate::files::Res;",
			"",
			"pub struct Day$1;",
			"",
			"impl Aoc2020 for Day$1 {",
			"    type Input = Vec<$2>;",
			"    type Result1 = $3;",
			"    type Result2 = $4;",
			"    ",
			"    fn day() -> usize {$1}",
			"    ",
			"    fn load() -> Res<Self::Input> {",
			"         unimplemented!(\"Can't load this yet\")",
			"    }",
			"",
			"    fn part_1(_input: &Self::Input) -> Self::Result1 {",
			"        $1",
			"    }",
			"",
			"    fn part_2(_input: &Vec<Self::Result2>) -> Self::Result2 {",
			"        $1",
			"    }",
			"}"
		],
		"description": "Create imports and an unimplemented Aoc2020 impl for the day."
	},
	"create an example test": {
		"scope": "rust",
		"prefix": "test",
		"body": [
			"#[cfg(test)]",
			"mod tests {",
			"	use super::*;",
			"",
			"	#[test]",
			"	fn part_1() {",
			"		let input = parse($0).unwrap();",
			"        let res = Day$1::part_1(&input);"
			"		assert_eq!(res, $1);",
			"	}",
			"}",
		],
		"description": "Create a test module with an example test."
	},
}